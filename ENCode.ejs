<!-- Just copy and paste the code below into the source editor of a text block where youâ€™d like to display the Wall of Signers on an EN page -->
<script>
  const backgroundColor = "#ffffff";

  const textColor = "#000000";

  const listOfSignersCSV = `
    Jane Q. Public, John Doe, Lila Miller, Samir Rahman, Katie L. Smith, Chen Yu,
    Olga Petrova, Ahmed Hassan, Sarah Ng, David Kim, Emily Jones, Anil Mehta,
    Gabriela Souza, Lucas Miller, Anna Chen, Daniel King, James Smith, William White,
    Benjamin Thompson, Sophia Lee, Evelyn Roberts, Victoria Ross, Grace Clark,
    Emily Scott, Samuel Anderson, Chloe Patel, Oliver Wright, Mia Davis, Noah Harris,
    Ava Martin, Ethan Thompson, Isabella Lewis, Alexander Walker, Charlotte Young,
    Michael Hall, Amelia Allen, Daniel Hill, Harper King, Lucas Green, Madison Baker,
    Mason Nelson, Evelyn Carter, Logan Mitchell, Abigail Perez, Jacob Roberts, Sofia Turner,
    Emma Collins, Liam Stewart, Olivia Morris, Elijah Murphy, Mia Cook, Oliver Reed,
    Grace Cooper, Aiden Morgan, Chloe Bailey, Lucas Rivera, Madison Rogers, Ethan Peterson
    `;
</script>
<h1 style="text-align: center">Wall of Signers &quot;Code Block&quot;</h1>
<style type="text/css">
  [data-engrid-theme="engrid-ran3"]:not(
      #en__pagebuilder
    )[data-engrid-layout="leftleft1col"]
    .page-backgroundImage:before {
    background-color: #000000 !important;
    background-image: none !important;
  }

  body:not(#en__pagebuilder) .page-backgroundImage {
    position: sticky !important;
    top: 0 !important;
    height: 100vh !important;
  }

  @media screen and (max-width: 878px) {
    [data-engrid-theme="engrid-ran3"]:not(#en__pagebuilder)
      .page-backgroundImage,
    [data-engrid-theme="engrid-ran3"]:not(#en__pagebuilder) #signers-wall-host {
      height: 200px !important;
      overflow: hidden !important;
    }
  }
</style>
<script>
  // Utility: determine whether to enable debug logging
  const DEBUG = (function () {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const isDebugParam = urlParams.get("debug") === "true";
      const isInIFrame = window.self !== window.top;
      const hostname = window.location.hostname;
      const isLocalhost = hostname === "localhost" || hostname === "127.0.0.1";
      return isDebugParam || isInIFrame || isLocalhost;
    } catch (e) {
      return false;
    }
  })();

  // Inject content into a shadow DOM within the .page-backgroundImage element
  document.addEventListener("DOMContentLoaded", () => {
    const containerEl = document.querySelector(".page-backgroundImage");
    if (!containerEl) {
      if (DEBUG) console.error(".page-backgroundImage element not found");
      return;
    }

    // 1. Create a host element for the Shadow DOM
    const shadowHost = document.createElement("div");
    shadowHost.id = "signers-wall-host";
    containerEl.appendChild(shadowHost);

    // 2. Attach the shadow root
    const shadowRoot = shadowHost.attachShadow({ mode: "open" });
    if (DEBUG) console.log("Attached Shadow DOM to #signers-wall-host.");

    // 3. Define CSS and HTML to be injected into the Shadow DOM
    const componentCSS = `
      /* All styles are now scoped to the shadow DOM */
      :host {
        --background-color: ${backgroundColor};
        --text-color: ${textColor};
        --button-bg: rgba(30, 30, 30, 0.7);
        --button-bg-hover: rgba(50, 50, 50, 0.8);
      }

      .signers-wall {
        width: 100%;
        height: 100vh; /* Match the parent's height */
        margin: 0;
        box-sizing: border-box;
        padding: 0;
        background: var(--background-color);
        display: flex;
        flex-direction: column;
        /* MODIFIED: Reverted from fixed/sticky back to relative */
        position: relative;
        box-shadow: 0 4px 32px rgba(0, 0, 0, 0.53);
        color: var(--text-color);
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
          'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji',
          'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
      }

      .signers-list-container {
        flex-grow: 1;
        overflow: hidden;
        position: relative;
        padding: 0 30px;
        display: flex;
        flex-direction: column;
        cursor: pointer;
        outline: none;
      }

      .signers-list {
        font-family: inherit;
        font-size: 1.1rem;
        line-height: 2rem;
        color: var(--text-color);
        will-change: transform;
        display: block;
        min-width: 100%;
        user-select: none;
        margin: 0;
        padding: 0;
        column-width: 190px;
        column-gap: 40px;
      }

      .signers-list.paused {
        animation-play-state: paused !important;
      }

      .signers-list div {
        break-inside: avoid;
        margin-bottom: 16px;
        font-weight: 600;
        letter-spacing: 0.01em;
        padding-left: 2px;
        white-space: nowrap;
      }

      .play-pause-btn {
        position: absolute;
        bottom: 24px;
        left: 50%;
        transform: translateX(-50%);
        width: 48px;
        height: 48px;
        border-radius: 50%;
        border: none;
        background-color: var(--button-bg);
        transition: background-color 0.2s;
        color: white;
        cursor: pointer;
        outline: none;
        display: flex;
        align-items: center;
        justify-content: center;
        user-select: none;
        font-family: inherit;
        z-index: 10;
      }

      .play-pause-btn:hover,
      .play-pause-btn:focus {
        background-color: var(--button-bg-hover);
        color: #fff;
        outline: none;
      }

      .play-pause-btn svg {
        width: 2rem;
        height: 2rem;
        fill: currentColor;
        pointer-events: none;
      }

      @media (max-width: 878px) {
        .signers-wall {
          height: 200px;
          // height: auto;
          // min-height: 50vh;
        }
        .signers-list-container {
          display: block;
          padding: 0 8vw;
        }
        .signers-list {
          column-width: 110px;
          // column-gap: 16px;
        }
        .play-pause-btn {
          font-size: 1rem;
          top: 130px;
          bottom: initial;
        }
      }

      @media (prefers-reduced-motion: reduce) {
        .signers-list {
          animation: none !important;
        }
        .play-pause-btn {
          display: none !important;
        }
        .signers-list-container {
          cursor: default;
        }
      }
    `;

    const componentHTML = `
      <div class="signers-wall">
        <div
          class="signers-list-container"
          tabindex="0"
          role="button"
          aria-pressed="true"
          aria-label="Toggle scrolling animation"
        >
          <div class="signers-list" id="signers-list"></div>
        </div>
        <button
          id="scroll-toggle"
          class="play-pause-btn"
          aria-label="Pause scrolling"
          title="Pause scrolling"
        ></button>
      </div>
    `;

    // 4. Inject the CSS and HTML into the shadow root
    shadowRoot.innerHTML = `
      <style>${componentCSS}</style>
      ${componentHTML}
    `;
    if (DEBUG) console.log("Injected HTML and CSS into Shadow DOM.");

    // 5. Initialize the script, passing the shadowRoot for context
    initializeSignersScroll(shadowRoot);
  });

  function initializeSignersScroll(shadowRoot) {
    // All element queries are now scoped to the shadowRoot
    const listEl = shadowRoot.getElementById("signers-list");
    const container = shadowRoot.querySelector(".signers-list-container");
    const toggleBtn = shadowRoot.getElementById("scroll-toggle");

    if (DEBUG) {
      console.log("shadowRoot listEl:", listEl);
      console.log("shadowRoot container:", container);
      console.log("shadowRoot toggleBtn:", toggleBtn);
    }

    if (!listEl || !container || !toggleBtn) {
      if (DEBUG)
        console.error("Critical elements not found inside Shadow DOM.");
      return;
    }

    let isPlaying = true;
    const prefersReduced = window.matchMedia(
      "(prefers-reduced-motion: reduce)"
    ).matches;
    if (DEBUG) console.log("prefers-reduced-motion:", prefersReduced);

    function shuffleArray(arr) {
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    const svgPause = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M6.75 5.25a.75.75 0 0 0-.75.75v12a.75.75 0 0 0 .75.75h3a.75.75 0 0 0 .75-.75V6a.75.75 0 0 0-.75-.75h-3zm7.5 0a.75.75 0 0 0-.75.75v12a.75.75 0 0 0 .75.75h3a.75.75 0 0 0 .75-.75V6a.75.75 0 0 0-.75-.75h-3z" clip-rule="evenodd"/>
      </svg>`;

    const svgPlay = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M4.5 5.653c0-1.426 1.529-2.33 2.779-1.643l11.54 6.647c1.295.742 1.295 2.545 0 3.286L7.279 20.99c-1.25.717-2.779-.217-2.779-1.643V5.653z" clip-rule="evenodd"/>
      </svg>`;

    function updateToggleBtn() {
      toggleBtn.innerHTML = isPlaying ? svgPause : svgPlay;
      toggleBtn.setAttribute(
        "aria-label",
        isPlaying ? "Pause scrolling" : "Play scrolling"
      );
      toggleBtn.setAttribute(
        "title",
        isPlaying ? "Pause scrolling" : "Play scrolling"
      );
      container.setAttribute("aria-pressed", isPlaying.toString());
      if (DEBUG) console.log("Toggle button updated: isPlaying =", isPlaying);
    }

    function populateAndAnimateSigners() {
      listEl.style.animation = "none";

      const signers = shuffleArray(
        listOfSignersCSV
          .split(",")
          .map((s) => s.trim())
          .filter(Boolean)
      );

      const singleHtml = signers.map((name) => `<div>${name}</div>`).join("");
      listEl.innerHTML = singleHtml;

      const singleHeight = listEl.scrollHeight;
      const containerHeight = container.clientHeight;

      if (DEBUG) {
        console.log(
          "populateAndAnimateSigners: singleHeight =",
          singleHeight,
          "containerHeight =",
          containerHeight
        );
      }

      if (!singleHeight || !containerHeight) {
        if (DEBUG)
          console.warn("populateAndAnimateSigners: Heights not ready yet");
        // Retry after a short delay
        setTimeout(populateAndAnimateSigners, 100);
        return;
      }

      // Ensure there's enough content to scroll smoothly
      const repeatCount = Math.max(
        2,
        Math.ceil((containerHeight * 2) / singleHeight)
      );

      if (DEBUG)
        console.log("populateAndAnimateSigners: repeatCount =", repeatCount);

      listEl.innerHTML = singleHtml.repeat(repeatCount);

      const totalHeight = listEl.scrollHeight;
      const scrollDistance = totalHeight - containerHeight;

      if (scrollDistance <= 0) {
        if (DEBUG)
          console.log(
            "Content fits within the container, no animation needed."
          );
        return;
      }

      const speed = 30; // px per second
      const duration = scrollDistance / speed;

      if (DEBUG) {
        console.log(
          `populateAndAnimateSigners: scrollDistance = ${scrollDistance}px, duration = ${duration}s`
        );
      }

      let styleSheet = shadowRoot.getElementById("dynamic-scroll-keyframes");
      if (!styleSheet) {
        styleSheet = document.createElement("style");
        styleSheet.id = "dynamic-scroll-keyframes";
        shadowRoot.appendChild(styleSheet);
      }

      styleSheet.textContent = `
        @keyframes scroll-up-infinite {
          0% { transform: translateY(0); }
          100% { transform: translateY(-${scrollDistance}px); }
        }
      `;

      if (!prefersReduced) {
        listEl.style.animation = `scroll-up-infinite ${duration}s linear infinite`;
        listEl.style.animationPlayState = isPlaying ? "running" : "paused";
        if (DEBUG) console.log("Animation applied:", listEl.style.animation);
      } else if (DEBUG) {
        console.log("Animation not applied due to prefers-reduced-motion");
      }
    }

    function togglePlayPause() {
      if (prefersReduced) {
        if (DEBUG)
          console.log("togglePlayPause ignored due to prefers-reduced-motion");
        return;
      }
      isPlaying = !isPlaying;
      if (DEBUG) console.log("togglePlayPause: isPlaying =", isPlaying);
      if (isPlaying) {
        listEl.style.animationPlayState = "running";
        listEl.classList.remove("paused");
      } else {
        listEl.style.animationPlayState = "paused";
        listEl.classList.add("paused");
      }
      updateToggleBtn();
    }

    // --- Initialization and Event Listeners ---

    populateAndAnimateSigners();
    updateToggleBtn();

    if (prefersReduced) {
      listEl.classList.add("paused");
      toggleBtn.style.display = "none";
      container.style.cursor = "default";
    } else {
      container.style.cursor = "pointer";
    }

    container.addEventListener("click", () => {
      if (DEBUG) console.log("Container clicked - toggle play/pause");
      togglePlayPause();
    });

    toggleBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      if (DEBUG) console.log("Button clicked - toggle play/pause");
      togglePlayPause();
    });

    container.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        if (DEBUG) console.log("Container keyboard toggle:", e.key);
        togglePlayPause();
      }
    });

    const resizeObserver = new ResizeObserver(() => {
      if (DEBUG) console.log("Container resized - recalculating animation");
      populateAndAnimateSigners();
    });

    resizeObserver.observe(container);
  }
</script>
